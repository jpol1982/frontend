



<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet"  href="styles/movimiento/movimiento.css" />
    

    <title>Simulador de Movimiento</title>
    
</head>





<body>

    <!-- Contenedor de cartas de acción -->
    <div class="cartas-container" id="cartas-container">
        <!-- Las cartas se generarán dinámicamente -->
    </div>

    <!-- Zona donde se colocan las cartas para ejecutar -->
    <div id="zona-drop">
        Arrastra tus movimientos aqui
    </div>
  
    <div>
    <!-- Botón para ejecutar las acciones -->
    <button id="ejecutar-btn" disabled>Ejecutar</button>
  <!--  <button id="guardar-btn" disabled>Guardar Movimientos</button>-->
    <button id="restablecer-btn">Restablecer Posición</button>
     <!-- Botón para mandar los datos al robot o esp32 -->
   <button id="mandarRobot-btn" disabled>Mandar Al robot</button>
</div>
    
    


    <!-- Escenario donde se mueve el personaje -->
    <div class="escenario"  style="background-image: url('img/figuras.jpg')">
        <!-- Personaje que se moverá -->
        <div class="personaje" id="personaje">
            <img src="img/robotderecha.jpg" alt="Personaje">
        </div>
    </div>


    <script>
        // Objeto con las URLs de las imágenes para cada acción
        const imagenesCartas = {
            girarIzq: 'img/girarIzq.png',
            girarDer: 'img/girarDer.png',
            avanzar: 'img/avanzar.png',
            retroceder: 'img/retroceder.png'
        };

        // Crear las cartas dinámicamente
        const cartasContainer = document.getElementById('cartas-container');
        for (const [accion, urlImagen] of Object.entries(imagenesCartas)) {
            const carta = document.createElement('div');
            carta.classList.add('carta');
            carta.setAttribute('draggable', 'true');
            carta.setAttribute('data-action', accion);

            const img = document.createElement('img');
            img.src = urlImagen;
            img.alt = accion;

            carta.appendChild(img);
            cartasContainer.appendChild(carta);
          
            // Eventos de arrastre para PC
            carta.addEventListener('dragstart', e => {
                e.dataTransfer.setData('text/plain', accion);
            });

            let posInicialX = 0;
            let posInicialY = 0;
            
// Eventos táctiles para móviles
carta.addEventListener('touchstart', e => {
        const touch = e.touches[0];
        posInicialX = 0;
        posInicialY = 0;

        carta.style.position = 'absolute';
        carta.style.left = `${touch.pageX - carta.offsetWidth / 2}px`;
        carta.style.top = `${touch.pageY - carta.offsetHeight / 2}px`;
    });

    carta.addEventListener('touchmove', e => {
        e.preventDefault();
        const touch = e.touches[0];
        carta.style.left = `${touch.pageX - carta.offsetWidth / 2}px`;
        carta.style.top = `${touch.pageY - carta.offsetHeight / 2}px`;
    });

    carta.addEventListener('touchend', e => {
        const touch = e.changedTouches[0];
        const dropZoneRect = zonaDrop.getBoundingClientRect();

        // Si la carta cae dentro de la zona de drop
        if (
            touch.pageX > dropZoneRect.left &&
            touch.pageX < dropZoneRect.right &&
            touch.pageY > dropZoneRect.top &&
            touch.pageY < dropZoneRect.bottom
        ) {
            instrucciones.push(accion);

            const nuevaCarta = document.createElement('div');
            nuevaCarta.style.width = '50px';
            nuevaCarta.style.height = '50px';
            nuevaCarta.classList.add('carta');

            const img = document.createElement('img');
            img.src = imagenesCartas[accion];
            img.alt = accion;

            nuevaCarta.appendChild(img);
            zonaDrop.appendChild(nuevaCarta);

            // Habilitar los botones
            document.getElementById('ejecutar-btn').disabled = false;
            document.getElementById('guardar-btn').disabled = false;
            document.getElementById('mandarRobot-btn').disabled = false;
            // Regresar la carta a su posición original después de soltarla
            carta.style.left = `${0}px`;
            carta.style.top = `${0}px`;
            carta.style.position = 'relative'; // Esto restaura su flujo normal en el DOM
        } else {
            // Si no se soltó en la zona de drop, la carta regresa a su lugar original
            carta.style.left = `${0}px`;
            carta.style.top = `${0}px`;
            carta.style.position = 'relative';
        }
    });




        }

        const personaje = document.getElementById('personaje');

        // Estado inicial del personaje
        let angulo = 0;
        let posicionX = 12; // Porcentaje del left
        let posicionY = 86; // Porcentaje del top

        // Lista de instrucciones (girarIzq, girarDer, avanzar, retroceder)
        const instrucciones = [];

        // Función para mover o girar al personaje
        function moverPersonaje(accion) {
            switch (accion) {
                case 'girarIzq':
                    angulo -= 90; // Girar 90 grados a la izquierda
                    break;
                case 'girarDer':
                    angulo += 90; // Girar 90 grados a la derecha
                    break;
                case 'avanzar':
                    // Avanzar en la dirección en que está mirando el personaje
                    posicionX += 25 * Math.cos(angulo * Math.PI / 180);
                    posicionY += 25 * Math.sin(angulo * Math.PI / 180);
                    break;
                case 'retroceder':
                    // Retroceder en la dirección opuesta a la que está mirando
                    posicionX -= 25 * Math.cos(angulo * Math.PI / 180);
                    posicionY -= 25 * Math.sin(angulo * Math.PI / 180);
                    break;
            }

            // Asegurarse de que el personaje no salga de los límites del escenario
            if (posicionX < 0) posicionX = 0;
            if (posicionX > 100) posicionX = 100;
            if (posicionY < 0) posicionY = 0;
            if (posicionY > 100) posicionY = 100;

            // Actualizar la posición y el ángulo del personaje
            personaje.style.transform = `translate(-50%, -50%) rotate(${angulo}deg)`;
            personaje.style.left = `${posicionX}%`;
            personaje.style.top = `${posicionY}%`;
        }

        // Zona donde se dejan caer las cartas
        const zonaDrop = document.getElementById('zona-drop');
        zonaDrop.addEventListener('dragover', e => {
            e.preventDefault();
        });

    

        zonaDrop.addEventListener('drop', e => {
            e.preventDefault();
            const action = e.dataTransfer.getData('text/plain');
            instrucciones.push(action);

            const carta = document.createElement('div');
            carta.style.width= '50px';
            carta.style.height= '50px';
            carta.classList.add('carta');
            const img = document.createElement('img');
            img.src = imagenesCartas[action]; // Asigna la imagen desde el objeto
            img.alt = action;
            
           // img.scr.height = '20px';
          //  img.width = '20px';

            carta.appendChild(img);
            zonaDrop.appendChild(carta);

            document.getElementById('ejecutar-btn').disabled = false;
        //    document.getElementById('guardar-btn').disabled = false; // Habilitar el botón de guardar
            document.getElementById('restablecer-btn').disabled = false;
            document.getElementById('mandarRobot-btn').disabled = false;
        });

        // Función para ejecutar las instrucciones en secuencia
        function ejecutarInstrucciones() {
            let index = 0;
            console.log(instrucciones);
            function ejecutarPaso() {
                if (index >= instrucciones.length) return;

                const instruccion = instrucciones[index];
                
                moverPersonaje(instruccion);

                index++;
                setTimeout(() => ejecutarPaso(), 500); // Pausa entre cada paso
            }
            ejecutarPaso();
        }

        // Botón para ejecutar las instrucciones
        document.getElementById('ejecutar-btn').addEventListener('click', () => {
            ejecutarInstrucciones();
        });

        function restablecerPosicion() {
        // Restablecer valores iniciales
        posicionX = 12; // Parte inferior izquierda
        posicionY = 86;
        angulo = 0;

        // Actualizar visualmente la posición y el ángulo del personaje
        personaje.style.transform = `translate(-50%, -50%) rotate(${angulo}deg)`;
        personaje.style.left = `${posicionX}%`;
        personaje.style.top = `${posicionY}%`;

        // Opcional: Limpiar las instrucciones si se desea
        instrucciones.length = 0;
        document.getElementById('zona-drop').innerHTML = 'Arrastra las cartas aquí';
        document.getElementById('ejecutar-btn').disabled = true;
        document.getElementById('guardar-btn').disabled = true;
    }

        document.getElementById('restablecer-btn').addEventListener('click',() => { 
            restablecerPosicion();
        });
    </script>

</body>
</html>